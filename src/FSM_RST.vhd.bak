library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity FSM_RST is
	generic (
        N : positive := 128
    );
    port(
     RST	 : in std_logic;
	  ADDER    : in std_logic_vector(N-1 downto 0);
	  ONES	 : in std_logic_vector(N-1 downto 0);
     T 	 : in std_logic;
	  CCout	 : in std_logic;
	  St	 : in std_logic;
	  Sp	 : in std_logic;
	  SRST   : out std_logic
    );
end FSM_RST;

architecture simple of FSM_RST is
    signal qp, qn : std_logic_vector(1 downto 0) := "00";
begin  

    c1 : process(qp, T, CCout, St, Sp, ADDER, ONES)
    begin 
        case qp is
            when "00" =>      --s0
				SRST <= '0';
                if T = '1'  then
                    qn <= "01";
                else
                    qn <= qp;
                end if;
            when "01" =>      --s1
                SRST <= '1';
                if St = '1' then
                    qn <= "10";
                elsif CCout = '1' then
					qn <= "00";
				else
                    qn <= qp;
                end if;
					 
				when "10" =>      --s2
                SRST <= '1';
                if (Sp = '1' or CCout = '1') then
                    qn <= "11";
				else
                    qn <= qp;
                end if;
					 
            when others =>   --s3
                SRST <= '0';
                if (ADDER = ONES) then
                    qn <= "00";
                else
                    qn <= qp;
                end if;
        end case;
    end process;

    c2 : process(RST, qn)
    begin
        if RST = '0' then
            qp <= (others => '0');
			else
				qp <= qn;
        end if;
    end process;

end simple;
